1- 

SELECT * FROM BIT_DB.customers LIMIT 20;
SELECT * FROM BIT_DB.JanSales LIMIT 20;

--How many orders were placed in January?

SELECT COUNT(Quantity) FROM BIT_DB.JanSales; 
--9723

--How many of those orders were for an iPhone?

 SELECT COUNT(Quantity) FROM BIT_DB.JanSales WHERE Product = "iPhone";
 -- 379
 
 --Select the customer account numbers for all the orders that were placed in February.
 
 SELECT * FROM BIT_DB.FebSales;
 SELECT acctnum FROM BIT_DB.customers
 JOIN BIT_DB.FebSales
 ON customers.order_id = FebSales.orderID;
 
 --Which product was the cheapest one sold in January, and what was the price?
 
  SELECT Product, MIN(Price) FROM BIT_DB.JanSales;
--AAA Batteries (4-pack)	2.99

SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE  price in (SELECT min(price) FROM BIT_DB.JanSales);
-- AAA Batteries (4-pack)	2.99

--What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).

SELECT Product, SUM(Quantity)*price AS revenue 
FROM BIT_DB.JanSales
GROUP BY Product;

--20in Monitor	23647.85
--27in 4K Gaming Monitor	121676.88
--27in FHD Monitor	62845.810000000005
--34in Ultrawide Monitor	119316.8AA 
--Batteries (4-pack)	5472
--AAA Batteries (4-pack)	4772.04
--Apple Airpods Headphones	122100

--Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

SELECT SUM(Quantity), Product, location, SUM(Quantity)*price as revenue
FROM BIT_DB.FebSales
WHERE location ='548 Lincoln St, Seattle, WA 98101'
GROUP BY Product;

--How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?

SELECT COUNT(customers.acctnum), AVG(price*Quantity)
FROM BIT_DB.FebSales
LEFT JOIN customers
ON customers.order_id = FebSales.orderID
WHERE FebSales.Quantity > 2;


2- 

--Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").

SELECT FirstName, LastName, CustomerId, Country
FROM chinook.customers
WHERE country <> 'USA';

--Show only the Customers from Brazil.

SELECT FirstName, LastName, CustomerId, Country
FROM chinook.customers
WHERE country = 'Brazil';

--Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

SELECT customers.FirstName, customers.LastName, invoices.InvoiceId, invoices.BillingCountry, invoices.InvoiceDate
FROM chinook.invoices  
LEFT JOIN chinook.customers
on invoices.CustomerId = customers.CustomerId 
WHERE invoices.BillingCountry = "Brazil";

-- Show the Employees who are Sales Agents.

SELECT * FROM chinook.Employees
WHERE Title LIKE 'Sales%' ;

-- Find a unique/distinct list of billing countries from the Invoice table.

SELECT DISTINCT BillingCountry
FROM chinook.invoices;

SELECT BillingCountry
FROM chinook.invoices
GROUP BY BillingCountry;

--Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

SELECT employees.FirstName, employees.LastName, invoices.InvoiceId
FROM chinook.employees
LEFT JOIN chinook.customers
ON customers.SupportRepId = employees.EmployeeId
JOIN chinook.invoices 
ON invoices.customerID = customers.CustomerId;

-- Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT invoices.total, customers.FirstName, customers.LastName, customers.Country, employees.FirstName, employees.LastName
FROM chinook.employees
LEFT JOIN chinook.customers
ON customers.SupportRepId = employees.EmployeeId
JOIN chinook.invoices 
ON invoices.customerID = customers.CustomerId;

--How many Invoices were there in 2009?

SELECT COUNT(total)
FROM invoices
WHERE InvoiceDate LIKE '2009%';

SELECT COUNT(*)
FROM invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

-- What are the total sales for 2009?SELECT tracks.Name, invoice_items.InvoiceLineId

SELECT SUM(total)
FROM invoices
WHERE InvoiceDate LIKE '2009%';

-- Write a query that includes the purchased track name with each invoice line item.

SELECT tracks.Name, invoice_items.InvoiceLineId
FROM chinook.tracks
LEFT JOIN chinook.invoice_items
ON tracks.trackId = invoice_items.trackID;

--Write a query that includes the purchased track name AND artist name with each invoice line item.

SELECT tracks.Name, invoice_items.InvoiceLineId, artists.Name
FROM chinook.tracks
LEFT JOIN chinook.invoice_items
ON tracks.trackId = invoice_items.trackID
JOIN chinook.Albums
ON albums.AlbumId = tracks.AlbumId
JOIN chinook.artists
ON artists.ArtistId = albums.ArtistId;

SELECT tracks.Name, invoice_items.InvoiceLineId, tracks.Composer
FROM chinook.tracks
LEFT JOIN chinook.invoice_items
ON tracks.trackId = invoice_items.trackID;

--Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

SELECT tracks.Name, albums.Title, media_types.Name, genres.Name
FROM chinook.tracks
LEFT JOIN chinook.Albums
ON albums.AlbumId = tracks.AlbumId
JOIN chinook.genres
ON tracks.genreId = genres.genreId
JOIN media_types
ON media_types.MediaTypeId = tracks.MediaTypeId;

-- Show the total sales made by each sales agent.

SELECT ROUND(SUM(invoices.total),2) , employees.FirstName, employees.LastName
FROM chinook.employees
LEFT JOIN chinook.customers
ON customers.SupportRepId = employees.EmployeeId
JOIN chinook.invoices 
ON invoices.customerID = customers.CustomerId
WHERE employees.Title LIKE 'Sales%'
GROUP BY employees.FirstName;

-- Which sales agent made the most in sales in 2009?

SELECT ROUND(SUM(invoices.total),2), employees.FirstName, employees.LastName
FROM chinook.employees
LEFT JOIN chinook.customers
ON customers.SupportRepId = employees.EmployeeId
JOIN chinook.invoices 
ON invoices.customerID = customers.CustomerId
WHERE employees.Title LIKE 'Sales%' AND invoices.InvoiceDate LIKE '2009%'
GROUP BY employees.FirstName
ORDER BY ROUND(SUM(invoices.total),2) DESC
LIMIT 1;

3-

--Create a clothes store database

CREATE TABLE macabra (id INTEGER PRIMARY KEY, name TEXT, price INTEGER, stock INTEGER, size TEXT);

INSERT INTO macabra VALUES (1, "shirt", 790, 20, "s");
INSERT INTO macabra VALUES (2, "shirt", 790, 5, "m");
INSERT INTO macabra VALUES (3, "shirt", 790, 10, "l");
INSERT INTO macabra VALUES (4, "mono", 2890, 9, "u");
INSERT INTO macabra VALUES (5, "pants", 2450, 10, "s");
INSERT INTO macabra VALUES (6, "pants", 2450, 12, "m");
INSERT INTO macabra VALUES (7, "pants", 2450, 5, "l");
INSERT INTO macabra VALUES (8, "blouse", 1750, 10, "s");
INSERT INTO macabra VALUES (9, "blouse", 1750, 10, "m");
INSERT INTO macabra VALUES (10, "blouse", 1750, 1, "l");
INSERT INTO macabra VALUES (11, "bag", 990, 10, "s");
INSERT INTO macabra VALUES (12, "bag", 990, 20, "l");
INSERT INTO macabra VALUES (13, "dress", 1690, 4, "s");
INSERT INTO macabra VALUES (14, "dress", 1690, 3, "m");
INSERT INTO macabra VALUES (15, "dress", 1690, 1, "l");

--display the database ordered by price. 

SELECT * FROM macabra ORDER BY price;

--what items are priced over 2000? 

SELECT * FROM macabra WHERE price > 2000 ORDER BY price;

--How many items are in stock? 

SELECT SUM(stock) FROM macabra 
